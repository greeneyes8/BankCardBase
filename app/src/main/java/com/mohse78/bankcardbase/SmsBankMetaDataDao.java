package com.mohse78.bankcardbase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mohse78.bankcardbase.SmsBankMetaData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SMS_BANK_META_DATA.
*/
public class SmsBankMetaDataDao extends AbstractDao<SmsBankMetaData, Long> {

    public static final String TABLENAME = "SMS_BANK_META_DATA";

    /**
     * Properties of entity SmsBankMetaData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BankName = new Property(1, String.class, "bankName", false, "BANK_NAME");
        public final static Property AccountNumber = new Property(2, String.class, "accountNumber", false, "ACCOUNT_NUMBER");
        public final static Property DebitFieldName = new Property(3, String.class, "debitFieldName", false, "DEBIT_FIELD_NAME");
        public final static Property CreditFieldName = new Property(4, String.class, "creditFieldName", false, "CREDIT_FIELD_NAME");
        public final static Property Description = new Property(5, String.class, "description", false, "DESCRIPTION");
        public final static Property Amount = new Property(6, Double.class, "amount", false, "AMOUNT");
        public final static Property Balance = new Property(7, Double.class, "balance", false, "BALANCE");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
    };


    public SmsBankMetaDataDao(DaoConfig config) {
        super(config);
    }
    
    public SmsBankMetaDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SMS_BANK_META_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'BANK_NAME' TEXT," + // 1: bankName
                "'ACCOUNT_NUMBER' TEXT," + // 2: accountNumber
                "'DEBIT_FIELD_NAME' TEXT," + // 3: debitFieldName
                "'CREDIT_FIELD_NAME' TEXT," + // 4: creditFieldName
                "'DESCRIPTION' TEXT," + // 5: description
                "'AMOUNT' REAL," + // 6: amount
                "'BALANCE' REAL," + // 7: balance
                "'DATE' INTEGER);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SMS_BANK_META_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SmsBankMetaData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String bankName = entity.getBankName();
        if (bankName != null) {
            stmt.bindString(2, bankName);
        }
 
        String accountNumber = entity.getAccountNumber();
        if (accountNumber != null) {
            stmt.bindString(3, accountNumber);
        }
 
        String debitFieldName = entity.getDebitFieldName();
        if (debitFieldName != null) {
            stmt.bindString(4, debitFieldName);
        }
 
        String creditFieldName = entity.getCreditFieldName();
        if (creditFieldName != null) {
            stmt.bindString(5, creditFieldName);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(6, description);
        }
 
        Double amount = entity.getAmount();
        if (amount != null) {
            stmt.bindDouble(7, amount);
        }
 
        Double balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(8, balance);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SmsBankMetaData readEntity(Cursor cursor, int offset) {
        SmsBankMetaData entity = new SmsBankMetaData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // bankName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // accountNumber
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // debitFieldName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // creditFieldName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // description
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // amount
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // balance
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SmsBankMetaData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBankName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccountNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDebitFieldName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreditFieldName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDescription(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAmount(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setBalance(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SmsBankMetaData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SmsBankMetaData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
