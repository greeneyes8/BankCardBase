package com.mohse78.bankcardbase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mohse78.bankcardbase.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Accounts.
*/
public class AccountDao extends AbstractDao<Account, Long> {

    public static final String TABLENAME = "Accounts";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AccountIdOriginal = new Property(1, String.class, "accountIdOriginal", false, "ACCOUNT_ID_ORIGINAL");
        public final static Property ForTransaction = new Property(2, Boolean.class, "forTransaction", false, "FOR_TRANSACTION");
        public final static Property GivSms = new Property(3, Boolean.class, "givSms", false, "GIV_SMS");
        public final static Property Balance = new Property(4, Double.class, "balance", false, "BALANCE");
    };


    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Accounts' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_ID_ORIGINAL' TEXT," + // 1: accountIdOriginal
                "'FOR_TRANSACTION' INTEGER," + // 2: forTransaction
                "'GIV_SMS' INTEGER," + // 3: givSms
                "'BALANCE' REAL);"); // 4: balance
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Accounts'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String accountIdOriginal = entity.getAccountIdOriginal();
        if (accountIdOriginal != null) {
            stmt.bindString(2, accountIdOriginal);
        }
 
        Boolean forTransaction = entity.getForTransaction();
        if (forTransaction != null) {
            stmt.bindLong(3, forTransaction ? 1l: 0l);
        }
 
        Boolean givSms = entity.getGivSms();
        if (givSms != null) {
            stmt.bindLong(4, givSms ? 1l: 0l);
        }
 
        Double balance = entity.getBalance();
        if (balance != null) {
            stmt.bindDouble(5, balance);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accountIdOriginal
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // forTransaction
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // givSms
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4) // balance
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccountIdOriginal(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setForTransaction(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setGivSms(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setBalance(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Account entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Account entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
