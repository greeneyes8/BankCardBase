package com.mohse78.bankcardbase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mohse78.bankcardbase.Bank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table Banks.
*/
public class BankDao extends AbstractDao<Bank, Long> {

    public static final String TABLENAME = "Banks";

    /**
     * Properties of entity Bank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ImageLogoId = new Property(2, Integer.class, "imageLogoId", false, "IMAGE_LOGO_ID");
        public final static Property ImageCardId = new Property(3, Integer.class, "imageCardId", false, "IMAGE_CARD_ID");
        public final static Property CardNumberDefault = new Property(4, String.class, "cardNumberDefault", false, "CARD_NUMBER_DEFAULT");
        public final static Property Deleted = new Property(5, Boolean.class, "deleted", false, "DELETED");
    };


    public BankDao(DaoConfig config) {
        super(config);
    }
    
    public BankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'Banks' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'IMAGE_LOGO_ID' INTEGER," + // 2: imageLogoId
                "'IMAGE_CARD_ID' INTEGER," + // 3: imageCardId
                "'CARD_NUMBER_DEFAULT' TEXT," + // 4: cardNumberDefault
                "'DELETED' INTEGER);"); // 5: deleted
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'Banks'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Bank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer imageLogoId = entity.getImageLogoId();
        if (imageLogoId != null) {
            stmt.bindLong(3, imageLogoId);
        }
 
        Integer imageCardId = entity.getImageCardId();
        if (imageCardId != null) {
            stmt.bindLong(4, imageCardId);
        }
 
        String cardNumberDefault = entity.getCardNumberDefault();
        if (cardNumberDefault != null) {
            stmt.bindString(5, cardNumberDefault);
        }
 
        Boolean deleted = entity.getDeleted();
        if (deleted != null) {
            stmt.bindLong(6, deleted ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Bank readEntity(Cursor cursor, int offset) {
        Bank entity = new Bank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // imageLogoId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // imageCardId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cardNumberDefault
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // deleted
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Bank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageLogoId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setImageCardId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCardNumberDefault(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDeleted(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Bank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Bank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
