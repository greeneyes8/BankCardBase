package com.mohse78.bankcardbase;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.mohse78.bankcardbase.AccountTransaction;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AccountTransactions.
*/
public class AccountTransactionDao extends AbstractDao<AccountTransaction, Long> {

    public static final String TABLENAME = "AccountTransactions";

    /**
     * Properties of entity AccountTransaction.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account_id = new Property(1, Long.class, "account_id", false, "ACCOUNT_ID");
        public final static Property LastBalance = new Property(2, Double.class, "lastBalance", false, "LAST_BALANCE");
        public final static Property Debit = new Property(3, Double.class, "debit", false, "DEBIT");
        public final static Property Credit = new Property(4, Double.class, "credit", false, "CREDIT");
        public final static Property CurrentBalance = new Property(5, Double.class, "currentBalance", false, "CURRENT_BALANCE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property CreationDate = new Property(7, java.util.Date.class, "creationDate", false, "CREATION_DATE");
        public final static Property TransactionType = new Property(8, Long.class, "transactionType", false, "TRANSACTION_TYPE");
    };


    public AccountTransactionDao(DaoConfig config) {
        super(config);
    }
    
    public AccountTransactionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AccountTransactions' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ACCOUNT_ID' INTEGER," + // 1: account_id
                "'LAST_BALANCE' REAL," + // 2: lastBalance
                "'DEBIT' REAL," + // 3: debit
                "'CREDIT' REAL," + // 4: credit
                "'CURRENT_BALANCE' REAL," + // 5: currentBalance
                "'DESCRIPTION' TEXT," + // 6: description
                "'CREATION_DATE' INTEGER," + // 7: creationDate
                "'TRANSACTION_TYPE' INTEGER);"); // 8: transactionType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AccountTransactions'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AccountTransaction entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long account_id = entity.getAccount_id();
        if (account_id != null) {
            stmt.bindLong(2, account_id);
        }
 
        Double lastBalance = entity.getLastBalance();
        if (lastBalance != null) {
            stmt.bindDouble(3, lastBalance);
        }
 
        Double debit = entity.getDebit();
        if (debit != null) {
            stmt.bindDouble(4, debit);
        }
 
        Double credit = entity.getCredit();
        if (credit != null) {
            stmt.bindDouble(5, credit);
        }
 
        Double currentBalance = entity.getCurrentBalance();
        if (currentBalance != null) {
            stmt.bindDouble(6, currentBalance);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        java.util.Date creationDate = entity.getCreationDate();
        if (creationDate != null) {
            stmt.bindLong(8, creationDate.getTime());
        }
 
        Long transactionType = entity.getTransactionType();
        if (transactionType != null) {
            stmt.bindLong(9, transactionType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AccountTransaction readEntity(Cursor cursor, int offset) {
        AccountTransaction entity = new AccountTransaction( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // account_id
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // lastBalance
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // debit
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // credit
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // currentBalance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // creationDate
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // transactionType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AccountTransaction entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLastBalance(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDebit(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setCredit(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setCurrentBalance(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreationDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setTransactionType(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AccountTransaction entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AccountTransaction entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
